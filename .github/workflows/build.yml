name: SonarCloud CI

on:
  push:
    branches:
      - develop
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build, Test and Analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path ${{ runner.temp }}\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path ${{ runner.temp }}\scanner

      - name: Restore dependencies
        run: dotnet restore

      - name: Prepare TestResults folder
        run: New-Item -ItemType Directory -Path TestResults -Force
        shell: powershell

      - name: Build, Test and SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          $scanner = "${{ runner.temp }}\scanner\dotnet-sonarscanner"

          # Inicia análise SonarCloud
          $scanner begin `
            /k:"murilo-valentim-dev_MeuLivroDeReceitas" `
            /o:"murilo-valentim-dev" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.cs.opencover.reportsPaths="TestResults\coverage.cobertura.xml"

          # Build da solução
          dotnet build --no-restore --configuration Release

          # Executa testes com cobertura
          dotnet test --no-build --configuration Release `
            /p:CollectCoverage=true `
            /p:CoverletOutputFormat=cobertura `
            /p:CoverletOutput=TestResults\coverage.cobertura.xml

          # Finaliza análise SonarCloud
          $scanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
